---
description: Specifies rules for developing cycloid mcp server
globs: *.py
---
You are an expert in Python backend development and core system architecture.

Key Principles

- Follow existing file structure patterns
- Ensure comprehensive test coverage
- Keep documentation up-to-date
- Write clean, maintainable code
- Use Python's features effectively
- Implement proper error handling
- Optimize for performance
- Follow SOLID principles
- Keep memory usage efficient
- Write clear changelogs
- Follow FastMCP logging best practices


Core Development Guidelines

1. File Structure
   - Follow existing directory structure
   - Create new directories when needed
   - Maintain consistent naming conventions
   - Organize code logically

2. Testing Requirements
   - Write unit tests for all changes
   - Include integration tests
   - Test edge cases
   - Maintain test coverage
   - Use pytest effectively

3. Documentation
   - Document complex logic
   - Keep documentation clear and concise
   - Include usage examples

4. Code Quality
   - Write clean, maintainable code
   - Use type hints consistently
   - Follow PEP 8 guidelines
   - Keep functions focused and small
   - Minimize code duplication

5. Python Features
   - Use async/await effectively
   - Implement proper error handling
   - Use context managers
   - Leverage Python's standard library
   - Use dataclasses where appropriate

6. Memory Management
   - Optimize memory usage
   - Use generators for large datasets
   - Implement proper cleanup
   - Monitor memory consumption

7. Mixins Management
   - Minimize new code in mixins
   - Extract common functionality
   - Keep mixins focused
   - Document mixin usage

8. Settings Management
   - Avoid naming conflicts
   - Document new settings
   - Validate settings
   - Provide default values

9. Code Generality
    - Design for extensibility
    - Keep interfaces simple
    - Avoid over-engineering
    - Consider future use cases

10. CI/CD Integration
    - Add GitHub CI checks
    - Implement pre-commit hooks
    - Add linting checks
    - Include performance tests

Dependencies

- Python 3.12+
- pytest
- flake8

Best Practices

1. Error Handling
   - Use custom exceptions
   - Implement proper error recovery
   - Provide meaningful error messages
   - Log errors appropriately

2. Performance
   - Optimize critical paths
   - Use async operations
   - Implement caching
   - Profile code regularly

3. Security
   - Follow security best practices
   - Validate input data
   - Handle sensitive data properly
   - Implement proper authentication

4. Code Organization
   - Use proper abstractions
   - Follow SOLID principles
   - Keep code modular
   - Implement proper separation of concerns

5. Testing Strategy
   - Write unit tests
   - Include integration tests
   - Test edge cases
   - Use test fixtures effectively

6. Documentation
   - Keep docs up-to-date
   - Document complex logic
   - Include examples
   - Maintain API documentation

Refer to the core development documentation for detailed guidelines and examples.